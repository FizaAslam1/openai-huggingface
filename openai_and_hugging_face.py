# -*- coding: utf-8 -*-
"""openai and hugging face

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DDALGb6SytfOMSY_KgVFjM2zvA9UnDvt
"""

from transformers import pipeline

analyzer = pipeline("sentiment-analysis", model="distilbert-base-uncased-finetuned-sst-2-english")

def analyze(text):
    result = analyzer(text)[0]
    print(f"Text: {text}\nSentiment: {result['label']} (Confidence: {result['score']:.2%})")

analyze("I love this product!")  # POSITIVE
analyze("This was terrible")     # NEGATIVE

from sentence_transformers import util, SentenceTransformer

model = SentenceTransformer('all-MiniLM-L6-v2')  # Free embedding model

def compare(text1, text2):
    emb1 = model.encode(text1)
    emb2 = model.encode(text2)
    sim = util.cos_sim(emb1, emb2).item()
    print(f"Similarity: {sim:.2f}/1.0")

compare("The cat sat", "A feline rested")  # 0.78

from openai import OpenAI
client = OpenAI(api_key="free-tier-key")  # Use actual free tier key

def generate_blog(topic):
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": f"Write a 300-word blog about {topic} with SEO metadata"}]
    )
    print(response.choices[0].message.content)

generate_blog("sustainable energy")

pipe = pipeline("text-generation", model="gpt2")

pipe = pipeline("sentiment-analysis")
pipe("I'm excited!")[0]['label']  # POSITIVE

ner = pipeline("ner", grouped_entities=True)
text = "Apple opened a store in Cupertino"
[(ent['word'], ent['entity_group']) for ent in ner(text)]
# [('Apple', 'ORG'), ('Cupertino', 'LOC')]

generator = pipeline("text-generation", model="gpt2")
generator("fiza a agood girl", max_length=50)[0]['generated_text']

from transformers import BertTokenizer
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')
tokenizer("Hello world!")['input_ids']  # [101, 7592, 2088, 999, 102]

from transformers import pipeline
import torch  # Added missing import
from wordcloud import WordCloud
import matplotlib.pyplot as plt

def generate_blog(topic):
    """Generate a complete blog post with visualizations using free models"""
    try:
        # Initialize pipeline with GPU acceleration if available
        device = 0 if torch.cuda.is_available() else -1
        generator = pipeline(
            "text-generation",
            model="gpt2",
            device=device,
            torch_dtype=torch.float16 if device == 0 else torch.float32
        )

        # Enhanced prompt engineering
        prompt = f"""Create a detailed blog post about {topic} with these sections:
1. Title:   A good girl name fiza
2. Introduction: Engaging paragraph
3. Main Content: 3-5 key points (300 words total)
4. Conclusion: Summary and call-to-action
5. SEO Keywords: 5-7 comma-separated phrases
6. Meta Description: 50-60 character snippet

Blog Structure:"""

        # Generate text with better parameters
        result = generator(
            prompt,
            max_length=600,
            num_return_sequences=1,
            temperature=0.7,
            top_p=0.9,
            do_sample=True
        )[0]['generated_text']

        # Improved parsing
        sections = {
            'title': extract_section(result, "1. Title:", "2. Introduction"),
            'content': extract_section(result, "3. Main Content:", "4. Conclusion"),
            'keywords': extract_section(result, "5. SEO Keywords:", "6. Meta Description"),
            'meta_desc': extract_section(result, "6. Meta Description:", None)
        }

        # Visualization
        generate_wordcloud(sections['content'])

        return sections

    except Exception as e:
        print(f"Error: {str(e)}")
        return None

def extract_section(text, start_marker, end_marker):
    """Helper to extract sections between markers"""
    start = text.find(start_marker) + len(start_marker) if start_marker in text else 0
    end = text.find(end_marker) if end_marker and end_marker in text else len(text)
    return text[start:end].strip()

def generate_wordcloud(text):
    """Generate visual word cloud"""
    wordcloud = WordCloud(
        width=800,
        height=400,
        background_color='white',
        stopwords={'the', 'and', 'to'}
    ).generate(text)

    plt.figure(figsize=(10, 5))
    plt.imshow(wordcloud)
    plt.axis("off")
    plt.show()

# Example usage
if __name__ == "__main__":
    blog = generate_blog("sustainable energy")
    if blog:
        print(f"üöÄ Title: {blog['title']}\n")
        print(f"üìù Content Preview:\n{blog['content'][:200]}...\n")
        print(f"üîç Keywords: {blog['keywords']}")
        print(f"üîñ Meta Description: {blog['meta_desc']}")

